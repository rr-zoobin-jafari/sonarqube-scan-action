env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  DOCKER_USERNAME: VAULT[development/kv/data/docker/sonardockerrw data.username]
  DOCKER_PASSWORD: VAULT[development/kv/data/docker/sonardockerrw data.access_token_rwd]
  
  # Mend scan global configuration  
  WS_PRODUCTNAME: SonarQube/GitHubScanAction
  MEND_API_KEY: VAULT[development/kv/data/mend data.apikey]
  WS_WSS_URL: https://saas-eu.whitesourcesoftware.com/agent

  # Staging image configuration
  STAGING_IMAGE_NAME: sq-scan-action

vm_instance_template: &VM_TEMPLATE
  experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
  image: docker-builder-v*
  type: t2.small
  region: eu-central-1
  subnet_id: ${CIRRUS_AWS_SUBNET}
  disk: 10
  cpu: 4
  memory: 16G

multi_arch_build_task: 
  ec2_instance:
    <<: *VM_TEMPLATE
  login_script:
    - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  build_script:
    - echo "Build and stage the ${STAGING_IMAGE_NAME} image for later reuse in other steps"
    - docker build --tag "${STAGING_IMAGE_NAME}" --push .

mend_task:
  depends_on: multi_arch_build
  ec2_instance:
    <<: *VM_TEMPLATE
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  login_script:
    - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
  setup_script:
    - apt-get remove -y unattended-upgrades
    - apt-get update && apt-get install -y --no-install-recommends openjdk-17-jre
    - curl -sSL https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar -o wss-unified-agent.jar
    - echo "docker.includes=${CURRENT_TAG}" >> .cirrus/wss-unified-agent.config
  scan_script:
    - echo "Scan the ${STAGING_IMAGE_NAME} image"
    - docker pull "${STAGING_IMAGE_NAME}"
    - java -jar wss-unified-agent.jar -c .cirrus/wss-unified-agent.config -apiKey $MEND_API_KEY -product ${WS_PRODUCTNAME} -project ${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}:master -wss.url ${WS_WSS_URL} -docker.scanImages true


